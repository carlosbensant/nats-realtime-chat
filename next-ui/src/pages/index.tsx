/* eslint-disable @typescript-eslint/no-floating-promises */
import { Button } from "@/components/ui/button";
import { useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
// import Link from "next/link";
import { Input } from "@/components/ui/input";

type ChatMessage = {
  fromUuid: string;
  meta: Record<string, unknown> | null;
  text: string;
  time: number;
};

const Home: NextPage = () => {
  const [ws, setWs] = useState<WebSocket | null>(null);
  const [channelId, setChannelId] = useState<string>("");
  const [uuid, setUuid] = useState<string>("");
  const [chatHistory, setChatHistory] = useState<ChatMessage[]>([]);

  // const pingAPI = async () => {
  //   const path = "ping";
  //   try {
  //     const response = await fetcher<{ message: string }>(path, HTTPMethod.GET);
  //     console.log(response.message);
  //   } catch (error) {
  //     console.log(error);
  //   }
  // };

  const handleConnect = () => {
    let token = localStorage.getItem("token");
    if (!token) token = "test-token";
    console.log("creating websocket....");
    const ws = new WebSocket(
      `ws://localhost:8080/connect?username=sebastian&channelId=${channelId}&uuid=${uuid}&token=${token}`
    );
    setWs(ws);
    ws.onopen = () => {
      console.log("websocket connection opened");
    };
    ws.onclose = () => {
      console.log("websocket connection closed");
    };
    ws.onerror = (err) => {
      console.log("websocket connection error", err);
    };
    ws.onmessage = (msg) => {
      console.log("websocket message received", msg);
      setChatHistory((prev) => {
        return [...prev, JSON.parse(msg.data as string) as ChatMessage];
      });
    };
  };

  const handleSendMessage = () => {
    if (!ws || ws.readyState != ws.OPEN) return;
    console.log("Sending message, the ws is defined and ready");
    const message = {
      type: "chatMsg",
      data: {
        text: "Hello from the client",
      },
    };
    ws.send(JSON.stringify(message));
  };

  // const handleDisconnect = () => {
  //   if (!ws || ws.readyState != ws.OPEN) return;
  //   console.log("Disconnecting");
  //   ws.close();
  // };

  return (
    <>
      <Head>
        <title>Testing chat</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col">
        <div className="">
          <div className="flex w-full flex-row items-center justify-center gap-3 rounded-lg border p-5">
            <div className="flex flex-col items-center gap-2">
              <Button variant="outline" onClick={handleSendMessage}>
                Send message
              </Button>
              <Button variant="outline" onClick={handleConnect}>
                Connect
              </Button>
            </div>
            <div className="fap-2 flex flex-col items-center">
              <Input
                placeholder="channelid"
                value={channelId}
                onChange={(event) => setChannelId(event.target.value)}
              />
              <Input
                placeholder="uuid"
                value={uuid}
                onChange={(event) => setUuid(event.target.value)}
              />
            </div>
          </div>
        </div>
        <div className="flex flex-col rounded-xl border p-5">
          {chatHistory.map((msg, index) => {
            return (
              <div key={`chat-message-${index}-${msg.text}`}>
                {index}: {msg.text}
              </div>
            );
          })}
        </div>
      </main>
    </>
  );
};

export default Home;
