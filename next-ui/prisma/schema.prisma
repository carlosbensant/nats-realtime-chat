// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    chats    ChatMember[]
    accounts Account[]
    sessions Session[]
    messages Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Chat app entities.
model Chat {
    id String @id @default(cuid())

    preview  ChatPreview?
    members  ChatMember[]
    messages Message[]
}

model ChatPreview {
    id                  String    @id @default(cuid())
    chatId              String    @unique
    lastMessageText     String?
    lastMessageSentAt   DateTime?
    lastMessageSentById String?

    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

// we enforce uniqueness on pair chatId and userId ( a user can only be in a chat once )
model ChatMember {
    chatId String
    userId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

    @@unique([chatId, userId])
}

model Message {
    id        String   @id @default(cuid())
    chatId    String
    text      String   @db.Text
    createdAt DateTime @default(now())
    sentById  String

    sentBy User @relation(fields: [sentById], references: [id], onDelete: Cascade)

    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}
