generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id              String    @id @default(uuid())
    createdAt       DateTime  @default(now()) @map("created_at")
    updatedAt       DateTime? @updatedAt @map("updated_at")
    loginCount      Int       @default(0) @map("login_count")
    lastLogin       DateTime? @map("last_login")
    lastIp          String?   @map("last_ip")
    hashed_password String    @map("hashed_password")
    salt            String    @map("salt")
    email           String    @unique @map("email")
    emailVerified   Boolean?  @map("email_verified")

    user User?

    @@index([id], name: "idx_account_id")
    @@index([email], name: "idx_account_email")
}

model User {
    id        String  @id @default(uuid())
    accountId String  @unique @map("account_id")
    username  String  @unique @map("username")
    imageUrl  String? @map("image_url")

    account   Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
    chats     ChatMember[]
    messages  Message[]
    interests Interest[]
    // combine both to bring a users friends when status is accepted
    requester Friend[]     @relation("Requester") // bring a user's friend requests when status is pending
    addressee Friend[]     @relation("Addressee") // bring a user's friend requests when status is pending

    @@index([username], name: "idx_user_username")
    @@index([accountId], name: "idx_user_account_id")
}

model VerificationToken {
    identifier String   @unique
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Chat {
    id String @id @default(cuid())

    preview  ChatPreview?
    members  ChatMember[]
    messages Message[]
}

model ChatPreview {
    id                  String    @id @default(cuid())
    chatId              String    @unique @map("chat_id")
    lastMessageText     String?   @map("last_message_text")
    lastMessageSentAt   DateTime? @map("last_message_sent_at")
    lastMessageSentById String?   @map("last_message_sent_by_id")

    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model ChatMember {
    chatId String @map("chat_id")
    userId String @map("user_id")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

    @@unique([chatId, userId])
}

model Interest {
    id        String   @id @default(cuid())
    userId    String   @map("user_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    tag       String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// only one table for simplicity
// we could have a separated table for the requests and one for the actual friends
model Friend {
    id          String       @id @default(cuid())
    requesterId String       @map("requester_id")
    addresseeId String       @map("addressee_id")
    createdAt   DateTime     @default(now()) @map("created_at")
    status      FriendStatus @default(PENDING)

    requester User @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
    addressee User @relation("Addressee", fields: [addresseeId], references: [id], onDelete: Cascade)

    @@unique([requesterId, addresseeId])
    @@index([requesterId], name: "idx_friend_requester_id")
    @@index([addresseeId], name: "idx_friend_addressee_id")
}

enum FriendStatus {
    PENDING
    ACCEPTED
    DECLINED
}

model Message {
    id        String   @id @default(cuid())
    chatId    String   @map("chat_id")
    text      String   @map("text") @db.Text
    createdAt DateTime @default(now()) @map("created_at")
    sentById  String   @map("sent_by_id")

    sentBy User @relation(fields: [sentById], references: [id], onDelete: Cascade)
    chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}
